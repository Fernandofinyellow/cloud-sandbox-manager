- name: retrieve default VPC info
  amazon.aws.ec2_vpc_net_info:
    filters:
      is-default: true
  register: vpc_info

- name: retrieve default Subnet info
  amazon.aws.ec2_vpc_subnet_info:
    filters:
      vpc-id: "{{ vpc_info.vpcs[0].vpc_id }}"
  register: subnet_info

# run the CloudFormation stack tasks for desired state and use async to no wait for task end
# otherwise each item in the loop will have to be completed for the next one to start, which would take too much time
# instead register the tasks data and use a second loop with async_status to wait for each task to complete
- name: ensure sandbox CloudFormation stack existence
  cloudformation:
    stack_name: "cloud-sandbox-{{ cloud_sandbox_environment }}"
    state: "{{ cloud_sandbox_cloudformation_state  }}"
    aws_access_key: "{{ cloud_sandbox_aws_access_key }}"
    aws_secret_key: "{{ cloud_sandbox_aws_secret_key }}"
    region: "{{ cloud_sandbox_region }}"
    template_body: "{{ lookup('template', 'templates/cloudformation-sandbox.yml') }}"
    template_parameters:
      KeyName: "{{ cloud_sandbox_key_name }}"
      InstanceType: "{{ cloud_sandbox_ec2_instances_type }}"
      ImageId: "{{ cloud_sandbox_ec2_instances_ami }}"
      DnsRecordSuffix: "{{ cloud_sandbox_domain_name }}"
      HostedZoneName: "{{ cloud_sandbox_route53_hosted_zone_name }}"
      # Use provided VPC and subnets, default to account default VPC and subnets
      VpcId: "{{ cloud_sandbox_vpc_id | default(vpc_info.vpcs[0].vpc_id) }}"
      InstanceSubnetId: "{{ cloud_sandbox_subnet_id | default(subnet_info.subnets | map(attribute='subnet_id') | list | first) }}"